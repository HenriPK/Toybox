
project( ${TARGET_PREFIX}extern LANGUAGES CXX C )
set( TARGET_PREFIX ${PROJECT_NAME}_ )

# define directory for extra cmake scripts
set( CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/cmake" )

# helpful message
message( STATUS "To remove a submodule for real, see https://stackoverflow.com/a/36593218" )

# add disired compiler flags to extern libraries but not to our own sources
enable_cxx_compiler_flag_if_supported( "-w" ) # suppress warnings generated by external libraries

# Add external sources as subdirectories here if they are CMake-enabled, or build them here if necessary
# Add custom includes <dirs> , linker arguments <flags> , and compile definitions <defs> where applicable like this:
# extern( include <dirs> )
# extern( link <flags> )
# extern( define <defs> )
# Then after all those are called, use
# extern( finish ) to create an interface combining all external dependencies for other targets to link to.

# GLM
# It's a header only so it only needs this
extern( include ${CMAKE_CURRENT_SOURCE_DIR}/glm )

# GLAD
# Build it here so that it can be easily replaced without copying CMakeLists.txt around all the time
add_library( ${TARGET_PREFIX}glad STATIC
  glad/src/glad.c
  )
target_include_directories( ${TARGET_PREFIX}glad PUBLIC
  ${CMAKE_CURRENT_SOURCE_DIR}/glad/include/
  )
extern( link ${TARGET_PREFIX}glad )

# SDL2
# For now, rely on the user's system to provide the headers and libraries.
find_package( SDL2 )
if ( NOT ${SDL2_FOUND} )
  sdl2_debug_env()
endif ()
extern( include ${SDL2_INCLUDE_DIR} )
extern( link ${SDL2_LIBRARY} )

# Any miscellaneous linker flags that need to be added in a platform or environment-specific way
extern( link ${extra_linker_flags} )

# Create an external dependency interface that will appear as ${TARGET_PREFIX}extern_interface outside of this scope.
extern( finish )
