
project( ${TARGET_PREFIX}extern LANGUAGES CXX C )
set( TARGET_PREFIX ${PROJECT_NAME}_ )

# define directory for extra cmake scripts
set(CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/cmake")

# helpful message
message( "To remove a submodule for real, see https://stackoverflow.com/a/36593218" )

# add disired compiler flags to extern libraries but not to our own sources
enable_cxx_compiler_flag_if_supported( "-w" ) # suppress warnings generated by external libraries

# Add external sources as subdirectories here if they are CMake-enabled, or build them here if necessary
# Add custom includes <dir> , linker arguments <flag> , and compile definitions <def> where convenient like this:
# extern(include <dir>)
# extern(link <flag>)
# extern(define <def>)

# GLM: It's a header only so it only needs this
extern( include ${CMAKE_CURRENT_SOURCE_DIR}/glm )

# GLAD: Build it here so that it can be easily replaced without copying CMakeLists.txt around all the time
add_library( ${TARGET_PREFIX}glad STATIC
  glad/src/glad.c
  )
target_include_directories( ${TARGET_PREFIX}glad PUBLIC
  ${CMAKE_CURRENT_SOURCE_DIR}/glad/include/
  )
extern( link ${TARGET_PREFIX}glad )

# SDL2: For now, rely on the user's system to provide the headers and libraries.
# for help with this, see https://trenki2.github.io/blog/2017/06/02/using-sdl2-with-cmake/
# but keep in mind to use newer versions of things than quoted in that article
# also, on Windows, try setting the environment variable SDL2 to point to the directory that has include and lib in it.
find_package( SDL2 REQUIRED )
extern( include ${SDL2_INCLUDE_DIR} )
extern( link ${SDL2_LIBRARY} )

# Assemble the external dependencies together into a linkable interface that also automatically includes all
# the necessary directories and linked libraries
add_library( ${TARGET_PREFIX}all INTERFACE )
target_include_directories( ${TARGET_PREFIX}all INTERFACE SYSTEM
  ${${TARGET_PREFIX}include}
  )
target_link_libraries( ${TARGET_PREFIX}all INTERFACE
  ${${TARGET_PREFIX}link}
  )
target_compile_definitions( ${TARGET_PREFIX}all INTERFACE
  ${${TARGET_PREFIX}define}
  )
